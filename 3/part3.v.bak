module oneHz(CLOCK_50,pulse);
input CLOCK_50;
output pulse;
wire counter;
wire[25:0]counter;
reg[25:0]counter;
always@(posedge CLOCK_50)
begin
if(pulse)
counter<=0;
else
counter<=counter+1'b1;
end
assign pulse=(counter==26'D49999999)
endmodule


module Tflipflop(enable,clk,Q,W);
input enable,clk,;
output Q,W;
reg Q;
always@(posedge clk)
begin
if(enable==1)
Q<=~Q;
else
Q<=Q;
end
assign W = enable&Q;
endmodule




module bit4Tff(enable,clk,Q);
input enable,clk;
output [3:0]Q;
wire [3:0]W;
Tflipflop u0(enable,clk,Q[0],W[0]);
Tflipflop u1(W[0],clk,Q[1],W[1]);
Tflipflop u2(W[1],clk,Q[2],W[2]);
Tflipflop u3(W[2],clk,Q[3],W[3]);
endmodule


module showDecimal(a,hex);
input [3:0]a;
output reg [6:0]hex;
always@*
 case(a)
 4'b0000: hex = 7'b0111111;
 4'b0001: hex = 7'b0000110;
 4'b0010: hex = 7'b1011011;
 4'b0011: hex = 7'b1001111;
 4'b0100: hex = 7'b1100110;
 4'b0101: hex = 7'b1101101;
 4'b0110: hex = 7'b1111101;
 4'b0111: hex = 7'b0000111;
 4'b1000: hex = 7'b1111111;
 4'b1001: hex = 7'b1101111;
 4'b1010: hex = 7'b1110111;
 4'b1011: hex = 7'b1111100;
 4'b1100: hex = 7'b0111001;
 4'b1101: hex = 7'b1011110;
 4'b1110: hex = 7'b1111001;
 4'b1111: hex = 7'b1110001;
 default hex = 7'b0000000;
 endcase
endmodule


module part3(SW,HEX0,CLOCK_50);
input [1:0]SW;
input CLOCK_50;
output [6:0]HEX0;
wire pulse;
wire [3:0]Q;
wire [6:0]H0;
oneHz(CLOCK_50,pulse);
bit4Tff(pulse,CLOCK_50,Q);
showDecimal y(Q[3:0],H0[6:0]);
assign HEX0=~H0;
endmodule